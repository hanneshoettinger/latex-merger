
@misc{_msdn_????,
	title = {{MSDN}  {VIsual} {Studio} {Profiler}},
	url = {https://msdn.microsoft.com/en-us/library/z9z62c29.aspx}
}

@inproceedings{gonzalez_model_2002,
	title = {Model oriented profiling of parallel programs},
	isbn = {0-7695-1444-8},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=994212},
	doi = {10.1109/EMPDP.2002.994212},
	urldate = {2015-10-05},
	publisher = {IEEE Comput. Soc},
	author = {Gonzalez, J.A. and Leon, C. and Roda, J.L. and Printista, M.},
	year = {2002},
	pages = {39--45},
	file = {00994212.pdf:C\:\\Users\\Joe\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\yvjftdrh.default\\zotero\\storage\\TXVZURWE\\00994212.pdf:application/pdf}
}

@article{vocking_performance_2014,
	title = {Performance analysis using {Great} {Performance} {Tools} and {Linux} {Trace} {Toolkit} next generation},
	author = {VÃ¶cking, Heye},
	year = {2014},
	file = {lul-1112-voecking-ausarbeitung.pdf:C\:\\Users\\Joe\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\yvjftdrh.default\\zotero\\storage\\HRMG498W\\lul-1112-voecking-ausarbeitung.pdf:application/pdf}
}

@article{finkler_analytic_2010,
	title = {An {Analytic} {Framework} for {Detailed} {Resource} {Profiling} in {Large} and {Parallel} {Programs} and {Its} {Application} for {Memory} {Use}},
	volume = {59},
	issn = {0018-9340},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5276794},
	doi = {10.1109/TC.2009.149},
	number = {3},
	urldate = {2015-10-05},
	journal = {IEEE Transactions on Computers},
	author = {Finkler, U.},
	month = mar,
	year = {2010},
	pages = {358--370},
	file = {An Analytic Framework for Detailed Resource.pdf:C\:\\Users\\Joe\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\yvjftdrh.default\\zotero\\storage\\E6SMBKBK\\An Analytic Framework for Detailed Resource.pdf:application/pdf}
}

@misc{_unreal_????,
	title = {Unreal {Profiler} {Docu}},
	url = {https://docs.unrealengine.com/latest/INT/Engine/Performance/Profiler/index.html}
}

@inproceedings{gabbay_can_1997,
	title = {Can program profiling support value prediction?},
	isbn = {0-8186-7977-8},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=645817},
	doi = {10.1109/MICRO.1997.645817},
	urldate = {2015-10-05},
	publisher = {IEEE Comput. Soc},
	author = {Gabbay, F. and Mendelson, A.},
	year = {1997},
	pages = {270--280},
	file = {00645817.pdf:C\:\\Users\\Joe\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\yvjftdrh.default\\zotero\\storage\\R9KCUKBN\\00645817.pdf:application/pdf}
}

@article{chauhan_atlas_2014,
	title = {{ATLAS} offline software performance monitoring and optimization},
	volume = {513},
	issn = {1742-6596},
	url = {http://stacks.iop.org/1742-6596/513/i=5/a=052022},
	doi = {10.1088/1742-6596/513/5/052022},
	abstract = {In a complex multi-developer, multi-package software environment, such as the ATLAS offline framework Athena, tracking the performance of the code can be a non-trivial task in itself. In this paper we describe improvements in the instrumentation of ATLAS offline software that have given considerable insight into the performance of the code and helped to guide the optimization work. The first tool we used to instrument the code is PAPI, which is a programing interface for accessing hardware performance counters. PAPI events can count floating point operations, cycles, instructions and cache accesses. Triggering PAPI to start/stop counting for each algorithm and processed event results in a good understanding of the algorithm level performance of ATLAS code. Further data can be obtained using Pin, a dynamic binary instrumentation tool. Pin tools can be used to obtain similar statistics as PAPI, but advantageously without requiring recompilation of the code. Fine grained routine and instruction level instrumentation is also possible. Pin tools can additionally interrogate the arguments to functions, like those in linear algebra libraries, so that a detailed usage profile can be obtained. These tools have characterized the extensive use of vector and matrix operations in ATLAS tracking. Currently, CLHEP is used here, which is not an optimal choice. To help evaluate replacement libraries a testbed has been setup allowing comparison of the performance of different linear algebra libraries (including CLHEP, Eigen and SMatrix/SVector). Results are then presented via the ATLAS Performance Management Board framework, which runs daily with the current development branch of the code and monitors reconstruction and Monte-Carlo jobs. This framework analyses the CPU and memory performance of algorithms and an overview of results are presented on a web page. These tools have provided the insight necessary to plan and implement performance enhancements in ATLAS code by identifying the most common operations, with the call parameters well understood, and allowing improvements to be quantified in detail.},
	language = {en},
	number = {5},
	urldate = {2015-10-05},
	journal = {Journal of Physics: Conference Series},
	author = {Chauhan, N. and Kabra, G. and Kittelmann, T. and Langenberg, R. and Mandrysch, R. and Salzburger, A. and Seuster, R. and Ritsch, E. and Stewart, G. and Eldik, N. van and Vitillo, R. and Collaboration, the Atlas},
	year = {2014},
	pages = {052022},
	file = {IOP Full Text PDF:C\:\\Users\\Joe\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\yvjftdrh.default\\zotero\\storage\\SIFJI4B9\\Chauhan et al. - 2014 - ATLAS offline software performance monitoring and .pdf:application/pdf}
}

@misc{_unity_????,
	title = {Unity {Profiler}}
}

@phdthesis{denda_profiling_1997,
	title = {Profiling concurrent programs},
	url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.71.9590&rep=rep1&type=pdf},
	urldate = {2015-11-11},
	school = {Citeseer},
	author = {Denda, Robert R.},
	year = {1997},
	file = {[PDF] from psu.edu:C\:\\Users\\Joe\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\yvjftdrh.default\\zotero\\storage\\QQ2UDJSD\\Denda - 1997 - Profiling concurrent programs.pdf:application/pdf}
}

@misc{_profiling_2015,
	title = {Profiling (computer programming)},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Profiling_(computer_programming)&oldid=678289517},
	abstract = {In software engineering, profiling ("program profiling", "software profiling") is a form of dynamic program analysis that measures, for example, the space (memory) or time complexity of a program, the usage of particular instructions, or the frequency and duration of function calls. Most commonly, profiling information serves to aid program optimization.
Profiling is achieved by instrumenting either the program source code or its binary executable form using a tool called a profiler (or code profiler). Profilers may use a number of different techniques, such as event-based, statistical, instrumented, and simulation methods.},
	language = {en},
	urldate = {2015-11-15},
	journal = {Wikipedia, the free encyclopedia},
	month = aug,
	year = {2015},
	note = {Page Version ID: 678289517},
	file = {Snapshot:C\:\\Users\\Joe\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\yvjftdrh.default\\zotero\\storage\\PA6MAFD5\\index.html:text/html}
}

@inproceedings{graham_gprof:_1982,
	address = {New York, NY, USA},
	series = {{SIGPLAN} '82},
	title = {Gprof: {A} {Call} {Graph} {Execution} {Profiler}},
	isbn = {0-89791-074-5},
	shorttitle = {Gprof},
	url = {http://doi.acm.org/10.1145/800230.806987},
	doi = {10.1145/800230.806987},
	abstract = {Large complex programs are composed of many small routines that implement abstractions for the routines that call them. To be useful, an execution profiler must attribute execution time in a way that is significant for the logical structure of a program as well as for its textual decomposition. This data must then be displayed to the user in a convenient and informative way. The gprof profiler accounts for the running time of called routines in the running time of the routines that call them. The design and use of this profiler is described.},
	urldate = {2015-11-15},
	booktitle = {Proceedings of the 1982 {SIGPLAN} {Symposium} on {Compiler} {Construction}},
	publisher = {ACM},
	author = {Graham, Susan L. and Kessler, Peter B. and Mckusick, Marshall K.},
	year = {1982},
	pages = {120--126}
}


@article{srivastava_atom:_2004,
	title = {{ATOM}: {A} {System} for {Building} {Customized} {Program} {Analysis} {Tools}},
	volume = {39},
	issn = {0362-1340},
	shorttitle = {{ATOM}},
	url = {http://doi.acm.org/10.1145/989393.989446},
	doi = {10.1145/989393.989446},
	abstract = {ATOM (Analysis Tools with OM) is a single framework for building a wide range of customized program analysis tools. It provides the common infrastructure present in all code-instrumenting tools; this is the difficult and time-consuming part. The user simply defines the tool-specific details in instrumentation and analysis routines. Building a basic block counting tool like Pixie with ATOM requires only a page of code.ATOM, using OM link-time technology, organizes the final executable such that the application program and user's analysis routines run in the same address space. Information is directly passed from the application program to the analysis routines through simple procedure calls instead of inter-process communication or files on disk. ATOM takes care that analysis routines do not interfere with the program's execution, and precise information about the program is presented to the analysis routines at all times. ATOM uses no simulation or interpretation.ATOM has been implemented on the Alpha AXP under OSF/1. It is efficient and has been used to build a diverse set of tools for basic block counting, profiling, dynamic memory recording, instruction and data cache simulation, pipeline simulation, evaluating branch prediction, and instruction scheduling.},
	number = {4},
	urldate = {2015-11-15},
	journal = {SIGPLAN Not.},
	author = {Srivastava, Amitabh and Eustace, Alan},
	month = apr,
	year = {2004},
	pages = {528--539},
	file = {wrl_94_2.pdf:C\:\\Users\\Joe\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\yvjftdrh.default\\zotero\\storage\\UD5MDZI7\\wrl_94_2.pdf:application/pdf}
}

@misc{microsoft_beginners_2015,
	title = {Beginners {Guide} to {Performance} {Profiling}},
	url = {https://msdn.microsoft.com/en-us/library/ms182372.aspx},
	language = {English},
	urldate = {2015-11-17},
	author = {Microsoft},
	year = {2015},
	file = {Beginners Guide to Performance Profiling:C\:\\Users\\Martin\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\ad2ztbwe.default\\zotero\\storage\\KNC7U4RX\\ms182372.html:text/html}
}

@misc{microsoft_how_2015,
	title = {How to: {Choose} {Collection} {Methods}},
	url = {https://msdn.microsoft.com/en-us/library/ms182374(v=vs.140).aspx},
	urldate = {2015-11-17},
	author = {Microsoft},
	year = {2015},
	file = {How to\: Choose Collection Methods:C\:\\Users\\Martin\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\ad2ztbwe.default\\zotero\\storage\\EG8NB5WH\\ms182374(v=vs.140).html:text/html}
}

@misc{microsoft_understanding_2015,
	title = {Understanding {Profiling} {Methods}},
	url = {https://msdn.microsoft.com/en-us/library/dd264994.aspx},
	urldate = {2015-12-15},
	author = {Microsoft},
	year = {2015},
	file = {}
}

@misc{unreal_performance_profiling,
	title = {{Performance} and {Profiling}},
	url = {https://docs.unrealengine.com/latest/INT/Engine/Performance/},
	urldate = {2016-01-24},
	author = {Unreal},
	year = {2016},
	file = {}
}

@misc{unreal_profiler,
	title = {{Profiler}},
	url = {https://docs.unrealengine.com/latest/INT/Engine/Performance/Profiler/index.html},
	urldate = {2016-01-24},
	author = {Unreal},
	year = {2016},
	file = {}
}

@misc{unreal_gpu_profiling,
	title = {{GPU} {Profiling}},
	url = {https://docs.unrealengine.com/latest/INT/Engine/Performance/GPU/},
	urldate = {2016-01-24},
	author = {Unreal},
	year = {2016},
	file = {}
}

@misc{nvidia_nvidia_2015,
	title = {{NVIDIA} {Nsight} {Visual} {Studio} {Edition} {User} {Guide} - {NVIDIA} {Nsight} {Visual} {Studio} {Edition} 5.0 {User} {Guide}},
	url = {http://docs.nvidia.com/nsight-visual-studio-edition/5.0/Nsight_Visual_Studio_Edition_User_Guide.htm},
	urldate = {2015-12-29},
	author = {Nvidia},
	year = {2015},
	file = {NVIDIA Nsight Visual Studio Edition User Guide - NVIDIA Nsight Visual Studio Edition 5.0 User Guide:C\:\\Users\\Agindacake\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\hfgew6gr.default\\zotero\\storage\\5IG2SPB3\\Nsight_Visual_Studio_Edition_User_Guide.html:text/html}
}

@misc{amd_codexl,
	title = {{CodeXL} - Powerful {Debugging}, {Profiling} and Analysis},
	url = {http://developer.amd.com/tools-and-sdks/opencl-zone/codexl/},
	urldate = {2016-01-24},
	author = {AMD},
	year = {2015},
	file = {}
}

@misc{amd_codexl_details,
	title = {{CodeXL} Benefits in Detail},
	url = {http://developer.amd.com/tools-and-sdks/opencl-zone/codexl/codexl-benefits-detail/},
	urldate = {2016-01-24},
	author = {AMD},
	year = {2015},
	file = {}
}